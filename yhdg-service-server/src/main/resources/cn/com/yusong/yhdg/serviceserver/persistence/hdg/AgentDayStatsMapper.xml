<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.com.yusong.yhdg.serviceserver.persistence.hdg.AgentDayStatsMapper">

    <select id="find" resultType="cn.com.yusong.yhdg.common.domain.hdg.AgentDayStats">
        select
        *
        from hdg_agent_day_stats
        where  agent_id = #{agentId}
        and stats_date = #{statsDate}
         and category = #{category}
        limit 1
    </select>

    <select id="sumDay" resultType="cn.com.yusong.yhdg.common.domain.hdg.PlatformDayStats">
        select
        ifnull(sum(exchange_money), 0) as incrementExchangeMoney,
        ifnull(sum(packet_period_money), 0) as incrementPacketPeriodMoney,
        ifnull(sum(refund_exchange_money), 0) as incrementRefundExchangeMoney,
        ifnull(sum(order_count), 0) as incrementExchangeCount,
        ifnull(sum(refund_exchange_count), 0) as incrementRefundExchangeCount,
        ifnull(sum(refund_packet_period_money), 0) as incrementRefundPacketPeriodMoney,
        ifnull(sum(platform_income), 0) as incrementPlatformIncome,
        ifnull(sum(income), 0) as agentIncome,
        ifnull(sum(foregift_money), 0) as incrementForegiftMoney,
        ifnull(sum(foregift_count), 0) as incrementForegiftCount,
        ifnull(sum(foregift_refund_money), 0) as incrementRefundForegiftMoney,
        ifnull(sum(foregift_refund_count), 0) as incrementRefundForegiftCount

        from hdg_agent_day_stats
        WHERE stats_date = #{statsDate}
    </select>

    <select id="sumMonth" resultType="cn.com.yusong.yhdg.common.domain.hdg.AgentMonthStats">
        select
            ifnull(sum(income), 0) as income,
            ifnull(sum(money), 0) as money,
            ifnull(sum(order_count), 0) as orderCount,
            ifnull(sum(exchange_money), 0) as exchangeMoney,
            ifnull(sum(packet_period_money), 0) as packetPeriodMoney,
            ifnull(sum(refund_exchange_money), 0) as refundExchangeMoney,
            ifnull(sum(refund_packet_period_money), 0) as refundPacketPeriodMoney,
            ifnull(sum(agent_exchange_money), 0) as agentExchangeMoney,
            ifnull(sum(agent_packet_period_money), 0) as agentPacketPeriodMoney,
            ifnull(sum(agent_refund_exchange_money), 0) as agentRefundExchangeMoney,
            ifnull(sum(agent_refund_packet_period_money), 0) as agentRefundPacketPeriodMoney,

            ifnull(sum(shop_money), 0) as shopMoney,
            ifnull(sum(shop_exchange_money), 0) as shopExchangeMoney,
            ifnull(sum(shop_packet_period_money), 0) as shopPacketPeriodMoney,
            ifnull(sum(shop_refund_packet_period_money), 0) as shopRefundPacketPeriodMoney,

            ifnull(sum(agent_company_money), 0) as agentCompanyMoney,
            ifnull(sum(agent_company_exchange_money), 0) as agentCompanyExchangeMoney,
            ifnull(sum(agent_company_refund_packet_period_money), 0) as agentCompanyRefundPacketPeriodMoney,
            ifnull(sum(agent_company_packet_period_money), 0) as agentCompanyPacketPeriodMoney,

            ifnull(sum(exchange_count), 0) as exchangeCount,
            ifnull(sum(packet_period_count), 0) as packetPeriodCount,
            ifnull(sum(refund_exchange_count), 0) as refundExchangeCount,
            ifnull(sum(packet_period_order_count), 0) as packetPeriodOrderCount,
            ifnull(sum(refund_packet_period_order_count), 0) as refundPacketPeriodOrderCount,
            ifnull(sum(platform_income), 0) as platformIncome,
            ifnull(sum(province_income), 0) as provinceIncome,
            ifnull(sum(city_income), 0) as cityIncome,

            ifnull(sum(foregift_remain_money), 0) as foregiftRemainMoney,
            ifnull(sum(deduction_ticket_money), 0) as deductionTicketMoney,
            ifnull(sum(laxin_pay_money), 0) as laxinPayMoney,

            ifnull(sum(foregift_money), 0) as foregiftMoney,
            ifnull(sum(foregift_count), 0) as foregiftCount,
            ifnull(sum(foregift_refund_money), 0) as foregiftRefundMoney,
            ifnull(sum(foregift_refund_count), 0) as foregiftRefundCount,
            ifnull(sum(insurance_money), 0) as insuranceMoney,
            ifnull(sum(insurance_count), 0) as insuranceCount,
            ifnull(sum(insurance_refund_money), 0) as insuranceRefundMoney,
            ifnull(sum(insurance_refund_count), 0) as insuranceRefundCount,

            ifnull(sum(electric_degree), 0) as electricDegree,
            ifnull(sum(electric_price), 0) as electricPrice
        from hdg_agent_day_stats
        where agent_id = #{agentId}
        and category = #{category}
        and stats_date LIKE concat(#{statsMonth}, '%')
    </select>

    <select id="sumTotal" resultType="cn.com.yusong.yhdg.common.domain.hdg.AgentTotalStats">
        select
        ifnull(sum(income), 0) as income,
        ifnull(sum(money), 0) as money,
        ifnull(sum(order_count), 0) as orderCount,
        ifnull(sum(exchange_money), 0) as exchangeMoney,
        ifnull(sum(packet_period_money), 0) as packetPeriodMoney,
        ifnull(sum(refund_exchange_money), 0) as refundExchangeMoney,
        ifnull(sum(refund_packet_period_money), 0) as refundPacketPeriodMoney,
        ifnull(sum(agent_exchange_money), 0) as agentExchangeMoney,
        ifnull(sum(agent_packet_period_money), 0) as agentPacketPeriodMoney,
        ifnull(sum(agent_refund_exchange_money), 0) as agentRefundExchangeMoney,
        ifnull(sum(agent_refund_packet_period_money), 0) as agentRefundPacketPeriodMoney,

        ifnull(sum(shop_money), 0) as shopMoney,
        ifnull(sum(shop_exchange_money), 0) as shopExchangeMoney,
        ifnull(sum(shop_packet_period_money), 0) as shopPacketPeriodMoney,
        ifnull(sum(shop_refund_packet_period_money), 0) as shopRefundPacketPeriodMoney,

        ifnull(sum(agent_company_exchange_money), 0) as agentCompanyExchangeMoney,
        ifnull(sum(agent_company_money), 0) as agentCompanyMoney,
        ifnull(sum(agent_company_packet_period_money), 0) as agentCompanyPacketPeriodMoney,
        ifnull(sum(agent_company_refund_packet_period_money), 0) as agentCompanyRefundPacketPeriodMoney,

        ifnull(sum(exchange_count), 0) as exchangeCount,
        ifnull(sum(packet_period_count), 0) as packetPeriodCount,
        ifnull(sum(refund_exchange_count), 0) as refundExchangeCount,
        ifnull(sum(packet_period_order_count), 0) as packetPeriodOrderCount,
        ifnull(sum(refund_packet_period_order_count), 0) as refundPacketPeriodOrderCount,
        ifnull(sum(platform_income), 0) as platformIncome,
        ifnull(sum(province_income), 0) as provinceIncome,
        ifnull(sum(city_income), 0) as cityIncome,

        ifnull(sum(foregift_remain_money), 0) as foregiftRemainMoney,
        ifnull(sum(deduction_ticket_money), 0) as deductionTicketMoney,
        ifnull(sum(laxin_pay_money), 0) as laxinPayMoney,

        ifnull(sum(foregift_money), 0) as foregiftMoney,
        ifnull(sum(foregift_count), 0) as foregiftCount,
        ifnull(sum(foregift_refund_money), 0) as foregiftRefundMoney,
        ifnull(sum(foregift_refund_count), 0) as foregiftRefundCount,
        ifnull(sum(insurance_money), 0) as insuranceMoney,
        ifnull(sum(insurance_count), 0) as insuranceCount,
        ifnull(sum(insurance_refund_money), 0) as insuranceRefundMoney,
        ifnull(sum(insurance_refund_count), 0) as insuranceRefundCount,

        ifnull(sum(electric_degree), 0) as electricDegree,
        ifnull(sum(electric_price), 0) as electricPrice
        from hdg_agent_day_stats
        where agent_id = #{agentId}
        and category = #{category}
    </select>

    <insert id="insert" parameterType="cn.com.yusong.yhdg.common.domain.hdg.AgentDayStats" >
        insert into hdg_agent_day_stats (
            partner_id,
            partner_name,
            agent_id,
            agent_name,
            stats_date,
            category,
            income,
            money,
            order_count,
            exchange_money,
            packet_period_money,
            refund_exchange_money,
            refund_packet_period_money,
            agent_exchange_money,
            agent_packet_period_money,
            agent_refund_exchange_money,
            agent_refund_packet_period_money,
            shop_money,
            shop_exchange_money,
            shop_packet_period_money,
            shop_refund_packet_period_money,
            agent_company_money,
            agent_company_exchange_money,
            agent_company_packet_period_money,
            agent_company_refund_packet_period_money,
            exchange_count,
            packet_period_count,
            refund_exchange_count,
            packet_period_order_count,
            refund_packet_period_order_count,
            platform_income,
            province_income,
            city_income,
            foregift_remain_money,
            deduction_ticket_money,
            laxin_pay_money,
            active_customer_count,
            foregift_money,
            foregift_count,
            foregift_refund_money,
            foregift_refund_count,
            insurance_money,
            insurance_count,
            insurance_refund_money,
            insurance_refund_count,
            cabinet_count,
            battery_count,

            electric_degree,
            electric_price,
            update_time
        ) values (
            #{partnerId},
            #{partnerName},
            #{agentId},
            #{agentName},
            #{statsDate},
            #{category},
            #{income},
            #{money},
            #{orderCount},
            #{exchangeMoney},
            #{packetPeriodMoney},
            #{refundExchangeMoney},
            #{refundPacketPeriodMoney},
            #{agentExchangeMoney},
            #{agentPacketPeriodMoney},
            #{agentRefundExchangeMoney},
            #{agentRefundPacketPeriodMoney},
            #{shopMoney},
            #{shopExchangeMoney},
            #{shopPacketPeriodMoney},
            #{shopRefundPacketPeriodMoney},
            #{agentCompanyMoney},
            #{agentCompanyExchangeMoney},
            #{agentCompanyPacketPeriodMoney},
            #{agentCompanyRefundPacketPeriodMoney},
            #{exchangeCount},
            #{packetPeriodCount},
            #{refundExchangeCount},
            #{packetPeriodOrderCount},
            #{refundPacketPeriodOrderCount},
            #{platformIncome},
            #{provinceIncome},
            #{cityIncome},
            #{foregiftRemainMoney},
            #{deductionTicketMoney},
            #{laxinPayMoney},
            #{activeCustomerCount},
            #{foregiftMoney},
            #{foregiftCount},
            #{foregiftRefundMoney},
            #{foregiftRefundCount},
            #{insuranceMoney},
            #{insuranceCount},
            #{insuranceRefundMoney},
            #{insuranceRefundCount},
            #{cabinetCount},
            #{batteryCount},

            #{electricDegree},
            #{electricPrice},
            #{updateTime}
        )
    </insert>

    <update id="update" parameterType="cn.com.yusong.yhdg.common.domain.hdg.AgentDayStats">
        update hdg_agent_day_stats
        set
            income = #{income},
            money = #{money},
            order_count = #{orderCount},
            exchange_money = #{exchangeMoney},
            packet_period_money = #{packetPeriodMoney},
            refund_exchange_money = #{refundExchangeMoney},
            refund_packet_period_money = #{refundPacketPeriodMoney},
            agent_exchange_money = #{agentExchangeMoney},
            agent_packet_period_money = #{agentPacketPeriodMoney},
            agent_refund_exchange_money = #{agentRefundExchangeMoney},
            agent_refund_packet_period_money = #{agentRefundPacketPeriodMoney},
            shop_money = #{shopMoney},
            shop_exchange_money = #{shopExchangeMoney},
            shop_packet_period_money = #{shopPacketPeriodMoney},
            shop_refund_packet_period_money = #{shopRefundPacketPeriodMoney},
            agent_company_money = #{agentCompanyMoney},
            agent_company_exchange_money = #{agentCompanyExchangeMoney},
            agent_company_packet_period_money = #{agentCompanyPacketPeriodMoney},
            agent_company_refund_packet_period_money = #{agentCompanyRefundPacketPeriodMoney},
            exchange_count = #{exchangeCount},
            packet_period_count = #{packetPeriodCount},
            refund_exchange_count = #{refundExchangeCount},
            packet_period_order_count = #{packetPeriodOrderCount},
            refund_packet_period_order_count = #{refundPacketPeriodOrderCount},
            platform_income = #{platformIncome},
            province_income = #{provinceIncome},
            city_income = #{cityIncome},
            foregift_remain_money = #{foregiftRemainMoney},
            deduction_ticket_money = #{deductionTicketMoney},
            laxin_pay_money = #{laxinPayMoney},
            active_customer_count = #{activeCustomerCount},
            foregift_money = #{foregiftMoney},
            foregift_count = #{foregiftCount},
            foregift_refund_money = #{foregiftRefundMoney},
            foregift_refund_count = #{foregiftRefundCount},
            insurance_money = #{insuranceMoney},
            insurance_count = #{insuranceCount},
            insurance_refund_money = #{insuranceRefundMoney},
            insurance_refund_count = #{insuranceRefundCount},
            cabinet_count = #{cabinetCount},
            battery_count = #{batteryCount},

            electric_degree = #{electricDegree},
            electric_price = #{electricPrice},
            update_time = #{updateTime}
        where agent_id = #{agentId}
        and stats_date = #{statsDate}
        and category = #{category}
    </update>

</mapper>